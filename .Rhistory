x11()
curve(y, from = -10, to = 10)
par(new=TRUE)
plot(x_1, x_2, col = stm$clusters)
y = function(x_1)(80.2083*x_1**3 - 42.5*x_1**2 + 4.20833*x_1 -1.5)
curve(y, from = -10, to = 10)
plot(x_1, x_2, col = stm$clusters)
curve(y, from = -10, to = 10)
par(new=TRUE)
plot(x_1, x_2, col = stm$clusters)
for(i in seq(along = nrow(x_2))) {
liney[i] = -1.37845*x_2[i]**3 - 2.11278*x_2[i]**2 + 0.0656642*x_2[i] + 0.2
}
liney = array()
for(i in seq(along = nrow(x_2))) {
liney[i] = -1.37845*x_2[i]**3 - 2.11278*x_2[i]**2 + 0.0656642*x_2[i] + 0.2
}
print(i)
for(i in seq(along = nrow(x_2))) {
print(i)
liney[i] = -1.37845*x_2[i]**3 - 2.11278*x_2[i]**2 + 0.0656642*x_2[i] + 0.2
}
nrow(x_2)
liney = array()
for(i in seq(along = length(x_2))) {
liney[i] = -1.37845*x_2[i]**3 - 2.11278*x_2[i]**2 + 0.0656642*x_2[i] + 0.2
}
liney = array(NA, dim = length(x_2))
for(i in seq(along = length(x_2))) {
liney[i] = -1.37845*x_2[i]**3 - 2.11278*x_2[i]**2 + 0.0656642*x_2[i] + 0.2
}
liney = array(NA, dim = length(x_2))
for(i in seq(along = 1:length(x_2))) {
liney[i] = -1.37845*x_2[i]**3 - 2.11278*x_2[i]**2 + 0.0656642*x_2[i] + 0.2
}
curve(y, from = -10, to = 10)
par(new=TRUE)
liney = array(NA, dim = length(x_2))
for(i in seq(along = 1:length(x_2))) {
liney[i] = -1.37845*x_2[i]**3 - 2.11278*x_2[i]**2 + 0.0656642*x_2[i] + 0.2
}
curve(y, from = -2, to = 2)
liney = array(NA, dim = length(x_2))
for(i in seq(along = 1:length(x_2))) {
liney[i] = -1.37845*x_2[i]**3 - 2.11278*x_2[i]**2 + 0.0656642*x_2[i] + 0.2
}
curve(y, from = -2, to = 2)
liney = array(NA, dim = length(x_2))
for(i in seq(along = 1:length(x_2))) {
liney[i] = -1.37845*x_2[i]**3 - 2.11278*x_2[i]**2 + 0.0656642*x_2[i] + 0.2
}
curve(y, from = -0.1, to = 0.1)
points(liney)
liney = array(NA, dim = length(x_2))
for(i in seq(along = 1:length(x_2))) {
liney[i] = -1.37845*x_2[i]**3 - 2.11278*x_2[i]**2 + 0.0656642*x_2[i] + 0.2
}
points(liney)
points
?points
library(rgl)
plot3d(x_1, x_2, z, col = stm$clusters)
planes3d(0,0,1)
plot(x_1, x_2, col = stm$clusters)
y = function(x_1, x_2)(80.2083*x_1**3 - 42.5*x_1**2 + 4.20833*x_1 -1.5 - x_2)
points(liney)
curve(liney)
points(y)
curve(y)
x_1 = stm$data[,1]
x_2 = stm$data[,2]
y = function(x_1, x_2)(80.2083*x_1**3 - 42.5*x_1**2 + 4.20833*x_1 -1.5 - x_2)
curve(y)
y = function(x_2)(-1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2 - x_1)
curve(y)
y = function(x_2, x_1)(-1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2 - x_1)
curve(y)
z = -1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2 - x_1
library(rgl)
plot3d(x_1, x_2, z, col = stm$clusters)
planes3d(0,0,1)
?plot3d
?planes3d
planes3d(0,0,1, alpha=0.5)
library(rgl)
plot3d(x_1, x_2, z, col = stm$clusters)
planes3d(0,0,1, alpha=0.5)
curve(y)
y = -1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2
curve(y)
y = -1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2
y = -1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2
curve(y)
y = function(x_2)(-1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2)
curve(y)
curve(y, from=-0.5, to=0.5)
curve(y, from=-0.5, to=1.5)
curve(y, from=-0.5, to=0.5)
curve(y, from=-1.5, to=1.5)
curve(y, from=-5, to=1.5)
curve(y, from=-5, to=5)
y = function(x_1)(-1.37845*x_1**3 - 2.11278*x_1**2 + 0.0656642*x_1 + 0.2)
curve(y, from=-5, to=5)
1.5
curve(y, from=-0.1, to=0.1)
curve(y, from=-0.2, to=0.2)
curve(y, from=-0.3, to=0.3)
plot(x_1, x_2, col=stm$clusters)
y = -1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2
plot(y)
line(y)
points(y)
points(y)
points(y)
plot3d(x_2, x_1, z, col = stm$clusters)
curve(y, from=-0.3, to=0.3)
plot(x_2, x_1, col=stm$clusters)
y = -1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2
curve(y, from=-0.3, to=0.3)
y = function(x_2)(-1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2)
curve(y, from=-0.3, to=0.3)
curve(y, from=-0.3, to=0.3)
pints(x_2, x_1, col=stm$clusters)
curve(y, from=-0.3, to=0.3)
points(x_2, x_1, col=stm$clusters)
curve(y, from=-3, to=2)
points(x_2, x_1, col=stm$clusters)
curve(y, from=-3, to=2, ylim=c(-2,2))
points(x_2, x_1, col=stm$clusters)
curve(y, from=-3, to=2, ylim=c(1.51))
points(x_2, x_1, col=stm$clusters)
curve(y, from=-3, to=2, ylim=c(1.51))
points(x_2, x_1, col=stm$clusters)
curve(y, from=-3, to=2, ylim=c(1.5,1))
points(x_2, x_1, col=stm$clusters)
curve(y, from=-3, to=2, ylim=c(-1.5,1))
points(x_2, x_1, col=stm$clusters)
points(x_1, x_2, col=stm$clusters)
curve(y, from=-3, to=2, ylim=c(-1.5,1))
points(x_1, x_2, col=stm$clusters)
y = function(x_1)(-1.37845*x_1**3 - 2.11278*x_1**2 + 0.0656642*x_1 + 0.2)
curve(y, from=-3, to=2, ylim=c(-1.5,1))
points(x_1, x_2, col=stm$clusters)
library(rgl)
plot3d(x_2, x_1, z, col = stm$clusters)
planes3d(0,0,1, alpha=0.5)
rm(list=ls())
# library(clusterSim)
# stm<-shapes.two.moon(360)
# plot(stm$data,col=rainbow(3)[stm$clusters])
#
# library(e1071)
#
# model = svm(stm$clusters ~ stm$data)
#
# predictedY= predict(model, stm$data)
#
# points(predictedY, col = "blue", pch=4)
#
# error = stm$clusters - predictedY
# svrPredictionRMSE = mean(error**2)  # 3.157061
# svrPredictionRMSE
#
#
# #### K(Xi, Xj ) = e^−||Xi−Xj ||^2/2σ2
#
# # Parameters:
# # SVM-Type:  eps-regression
# # SVM-Kernel:  radial
# # cost:  1
# # gamma:  0.5
# # epsilon:  0.1
#
# library(kernlab)
#
# rbf <- rbfdot(sigma = 0.5)
# rbf
# kpar(rbf)
#
# K <- rbf(stm$data[,1], stm$data[,2])
# K
# ?ksvm
#
# mdo = ksvm(stm$data, kernel = rbfdot)
# ####
#
# x_1 = stm$data[,1]
# x_2 = stm$data[,2]
#
# fullvect = append(x_1,x_2)
#
#
# Z_x = array()
# sigma = 2
#
# library(pracma)
# library(rdist)
# D = (pdist(stm$data,metric = "euclidean"))
#
# D = exp(-(D*D)/ ( 2*sigma**2));
# z = x_1*x_2^2
#
#
# source('./oen_minkowski.R')
#
# for(x1 in fullvect){
#   sum = 0
#   for(x2 in fullvect){
#     sum = sum + exp(-(minkowsky(x1,x2,2)**2)/(2*sigma**2))
#   }
#   Z_x = append(Z_x, sum)#/length(fullvect)
# }
#
# Z_x= Z_x[-1] #remove the NAN
# #### K(Xi, Xj ) = e^−||Xi−Xj ||^2/2σ2
#
# dat = Z_x[1:720]+Z_x[721:1440]
#
# library(rgl)
# plot3d(x_1, x_2, (x_1**1 + x_2**2), col = stm$clusters)
#
#
# #########################
#
# dataset = stm$data
# dataset = cbind(dataset, stm$clusters)
# library(e1071)
# https://www.dcode.fr/lagrange-interpolating-polynomial
# picked 4 random points
z = -1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2 - x_1
y = function(x_2)(-1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2)
curve(y, from=-3, to=2, ylim=c(-1.5,1))
points(x_2, x_1, col=stm$clusters)
library(rgl)
plot3d(x_2, x_1, z, col = stm$clusters)
planes3d(0,0,1, alpha=0.5)
library(clusterSim)
stm<-shapes.two.moon(360)
plot(stm$data,col=rainbow(3)[stm$clusters])
x_1 = stm$data[,1]
x_2 = stm$data[,2]
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730-hw2/kernel-trick.R", encoding = 'UTF-8')
dataset[,1]
nCol <- 5
dataset <- matrix(rnorm(nCol* 500),ncol= nCol)
dataset[,1]
sin(dataset[,1])
log2(dataset[,1])
nCol <- 5
dataset <- matrix(rnorm(nCol* 500),ncol= nCol)
dataset=cbind(dataset,sin(dataset[,1]))
dataset=cbind(dataset,cos(dataset[,3]))
dataset=cbind(dataset,exp(dataset[,4]))
nCol <- 5
dataset <- matrix(rnorm(nCol* 500),ncol= nCol)
dataset=cbind(dataset,sin(dataset[,1]))
dataset=cbind(dataset,cos(dataset[,3]))
dataset=cbind(dataset,exp(dataset[,4]))
library(stats)
pc <- prcomp(dataset,
center = TRUE,
scale. = TRUE)
summary(pc)
nCol <- 5
dataset <- matrix(rnorm(nCol* 500),ncol= nCol)
dataset=cbind(dataset,sin(dataset[,1]))
dataset=cbind(dataset,cos(dataset[,1]))
dataset=cbind(dataset,exp(dataset[,1]))
library(stats)
pc <- prcomp(dataset,
center = TRUE,
scale. = TRUE)
summary(pc)
nCol <- 5
dataset <- matrix(rnorm(nCol* 500),ncol= nCol)
dataset=cbind(dataset,dataset[,1]*sin(dataset[,1]))
dataset=cbind(dataset,dataset[,1]*cos(dataset[,1]))
dataset=cbind(dataset,dataset[,1]*exp(dataset[,1]))
library(stats)
pc <- prcomp(dataset,
center = TRUE,
scale. = TRUE)
summary(pc)
nCol <- 5
dataset <- matrix(rnorm(nCol* 500),ncol= nCol)
dataset=cbind(dataset,dataset[,1]*sin(dataset[,1]))
dataset=cbind(dataset,dataset[,1]*cos(dataset[,1]))
dataset=cbind(dataset,dataset[,1]*tanh(dataset[,1]))
library(stats)
pc <- prcomp(dataset,
center = TRUE,
scale. = TRUE)
summary(pc)
nCol <- 5
dataset <- matrix(rnorm(nCol* 500),ncol= nCol)
dataset=cbind(dataset,dataset[,1]*sin(dataset[,1]))
dataset=cbind(dataset,dataset[,1]*cos(dataset[,1]))
dataset=cbind(dataset,dataset[,1]*tanh(dataset[,2]))
library(stats)
pc <- prcomp(dataset,
center = TRUE,
scale. = TRUE)
summary(pc)
rm(list=ls())
#
# library(e1071)
#
# model = svm(stm$clusters ~ stm$data)
#
# predictedY= predict(model, stm$data)
#
# points(predictedY, col = "blue", pch=4)
#
# error = stm$clusters - predictedY
# svrPredictionRMSE = mean(error**2)  # 3.157061
# svrPredictionRMSE
#
#
# #### K(Xi, Xj ) = e^−||Xi−Xj ||^2/2σ2
#
# # Parameters:
# # SVM-Type:  eps-regression
# # SVM-Kernel:  radial
# # cost:  1
# # gamma:  0.5
# # epsilon:  0.1
#
# library(kernlab)
#
# rbf <- rbfdot(sigma = 0.5)
# rbf
# kpar(rbf)
#
# K <- rbf(stm$data[,1], stm$data[,2])
# K
# ?ksvm
#
# mdo = ksvm(stm$data, kernel = rbfdot)
# ####
#
# x_1 = stm$data[,1]
# x_2 = stm$data[,2]
#
# fullvect = append(x_1,x_2)
#
#
# Z_x = array()
# sigma = 2
#
# library(pracma)
# library(rdist)
# D = (pdist(stm$data,metric = "euclidean"))
#
# D = exp(-(D*D)/ ( 2*sigma**2));
# z = x_1*x_2^2
#
#
# source('./oen_minkowski.R')
#
# for(x1 in fullvect){
#   sum = 0
#   for(x2 in fullvect){
#     sum = sum + exp(-(minkowsky(x1,x2,2)**2)/(2*sigma**2))
#   }
#   Z_x = append(Z_x, sum)#/length(fullvect)
# }
#
# Z_x= Z_x[-1] #remove the NAN
# #### K(Xi, Xj ) = e^−||Xi−Xj ||^2/2σ2
#
# dat = Z_x[1:720]+Z_x[721:1440]
#
# library(rgl)
# plot3d(x_1, x_2, (x_1**1 + x_2**2), col = stm$clusters)
#
#
# #########################
#
# dataset = stm$data
# dataset = cbind(dataset, stm$clusters)
# library(e1071)
library(clusterSim)
stm<-shapes.two.moon(360)
x11()
plot(stm$data,col=rainbow(3)[stm$clusters])
x_1 = stm$data[,1]
x_2 = stm$data[,2]
# https://www.dcode.fr/lagrange-interpolating-polynomial
# picked 4 random points
z = -1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2 - x_1
y = function(x_2)(-1.37845*x_2**3 - 2.11278*x_2**2 + 0.0656642*x_2 + 0.2)
x11()
curve(y, from=-3, to=2, ylim=c(-1.5,1))
points(x_2, x_1, col=stm$clusters)
library(rgl)
plot3d(x_2, x_1, z, col = stm$clusters)
planes3d(0,0,1, alpha=0.5)
#to-do: make kernel from polynomial
rm(list=ls())
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/collectivestrength.R")
View(Groceries)
# Create an item frequency plot for the top 20 items
itemFrequencyPlot(Groceries,topN=20,type="absolute")
# Create an item frequency plot for the top 20 items
x11()
source("G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/collectivestrength.R")
View(Groceries)
View(Groceries)
inspect(rules[1:5])
# this is demo script for text data mining
#
# clear everything
rm(list=ls())
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
plot(cars)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
getwd()
### Data exploration and preprocessing
### Omar El Nahhas
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd(..)
print(getwd())
}
setwd_current_path()
### Data exploration and preprocessing
### Omar El Nahhas
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd('..')
print(getwd())
}
setwd_current_path()
### Data exploration and preprocessing
### Omar El Nahhas
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd('..')
print(getwd())
}
setwd_current_path()
### Data exploration and preprocessing
### Omar El Nahhas
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd('..')
print(getwd())
}
setwd_current_path()
### Data exploration and preprocessing
### Omar El Nahhas
rm(list=ls())
set.seed(1337)
packages_used = c("rstudioapi")
for(package in packages_used){
if(package %in% rownames(installed.packages()) == FALSE) {
install.packages(package)
}
}
setwd_current_path = function(){
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd('..')
print(getwd())
}
setwd_current_path()
######### BEGIN LOAD DATA
athletes_data = read.csv("./Data/athletes.csv", header=T, as.is=T)
events_data = read.csv("./Data/events.csv", header=T, as.is=T)
View(athletes_data)
